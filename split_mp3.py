import os
import argparse
import sys
import shutil
import hashlib # <-- –î–æ–±–∞–≤–ª—è–µ–º hashlib –¥–ª—è —Ö–µ—à-—Å—É–º–º
from pydub import AudioSegment
from pydub.silence import detect_silence
from pydub.exceptions import CouldntDecodeError # Import specific exception
from pydub.effects import normalize # <--- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º normalize
import pyttsx3
from tempfile import NamedTemporaryFile
import platform
import subprocess
import builtins

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
def normalize_audio(audio_segment, target_dbfs=-1.0):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å –∞—É–¥–∏–æ—Å–µ–≥–º–µ–Ω—Ç–∞ –¥–æ target_dbfs –ø–æ –ø–∏–∫–æ–≤–æ–º—É —É—Ä–æ–≤–Ω—é."""
    if audio_segment.dBFS == float('-inf'): # –ï—Å–ª–∏ —Ç–∏—à–∏–Ω–∞, —Ç–æ –Ω–µ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        print(f"    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–ø–∏–∫–æ–≤–∞—è): –°–µ–≥–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–∏—à–∏–Ω—É (—É—Ä–æ–≤–µ–Ω—å: {audio_segment.dBFS:.2f} dBFS). –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")
        return audio_segment
    
    # pydub.effects.normalize —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∞–º—ã–π –≥—Ä–æ–º–∫–∏–π –ø–∏–∫ –Ω–∞ (0 - headroom) dBFS.
    # –ï—Å–ª–∏ target_dbfs = -0.1, —Ç–æ headroom = 0.1
    # –ï—Å–ª–∏ target_dbfs = 0.0, —Ç–æ headroom = 0.0
    # headroom –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.
    headroom = abs(target_dbfs) 
    if target_dbfs > 0: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ target_dbfs –Ω–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, —Ç.–∫. —ç—Ç–æ –ø–∏–∫–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        print(f"    –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¶–µ–ª–µ–≤–æ–π –ø–∏–∫–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å {target_dbfs} dBFS > 0. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 0 dBFS (headroom 0.0).")
        headroom = 0.0

    print(f"    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–ø–∏–∫–æ–≤–∞—è): –ù–∞—á–∞–ª—å–Ω—ã–π RMS: {audio_segment.dBFS:.2f} dBFS, –ù–∞—á–∞–ª—å–Ω—ã–π –ø–∏–∫: {audio_segment.max_dBFS:.2f} dBFS. –¶–µ–ª–µ–≤–æ–π –ø–∏–∫: {target_dbfs:.2f} dBFS (headroom: {headroom:.2f} dB)")
    normalized_segment = normalize(audio_segment, headroom=headroom)
    print(f"    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–ø–∏–∫–æ–≤–∞—è): RMS –ø–æ—Å–ª–µ: {normalized_segment.dBFS:.2f} dBFS, –ü–∏–∫ –ø–æ—Å–ª–µ: {normalized_segment.max_dBFS:.2f} dBFS")
    return normalized_segment

def print(*args, **kwargs):
    kwargs['flush'] = True
    return builtins.print(*args, **kwargs)

def find_silent_split_point(audio_segment, target_time_ms, search_window_ms, silence_thresh_db, min_silence_len_ms):
    """
    –ò—â–µ—Ç —Ç–æ—á–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –≤ —Ç–∏—à–∏–Ω–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –æ–∫–Ω–µ –≤–æ–∫—Ä—É–≥ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è (–≤ –º—Å) –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ —Ç–∏—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    start_search = max(0, target_time_ms - search_window_ms // 2)
    end_search = min(len(audio_segment), target_time_ms + search_window_ms // 2)

    # Add check for valid search window relative to segment length
    if start_search >= end_search or start_search >= len(audio_segment):
         print(f"    Debug: Invalid search window [{start_search}, {end_search}] for segment length {len(audio_segment)} around {target_time_ms}ms")
         return None # –û–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∞—É–¥–∏–æ

    search_area = audio_segment[start_search:end_search]

    # Add a check for empty search area which can cause errors
    if len(search_area) == 0:
        print(f"    Debug: Empty search area created for window [{start_search}, {end_search}]")
        return None

    try:
        # Use a slightly larger seek_step if performance is an issue, but 1 is most accurate
        silences = detect_silence(
            search_area,
            min_silence_len=min_silence_len_ms,
            silence_thresh=silence_thresh_db,
            seek_step=1 # Check every ms for finer granularity
        )
    except Exception as e:
         print(f"    Error detecting silence in window [{start_search}, {end_search}]: {e}")
         return None # Error during silence detection


    if not silences:
        # print(f"    Debug: No silence found in window [{start_search}, {end_search}] with threshold {silence_thresh_db}dB and min_len {min_silence_len_ms}ms")
        return None # –¢–∏—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ–∫–Ω–µ

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ search_area –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    absolute_silences = [(s + start_search, e + start_search) for s, e in silences]

    # –ò—â–µ–º —Ç–∏—à–∏–Ω—É, —Å–µ—Ä–µ–¥–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ target_time_ms
    best_silence = min(
        absolute_silences,
        key=lambda s: abs(((s[0] + s[1]) / 2) - target_time_ms)
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ç–∏—à–∏–Ω—ã
    split_time = (best_silence[0] + best_silence[1]) // 2
    # print(f"    Debug: Found silences {absolute_silences}, best silence {best_silence}, split at {split_time}ms")
    return split_time


def split_mp3(input_file, output_dir, target_chunk_duration_s=100, search_window_s=10, silence_thresh_db=-40, min_silence_len_ms=500, speed_factor=1.0, target_normalization_dbfs=-0.1, enable_normalization=False):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç –û–î–ò–ù MP3 —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ ~target_chunk_duration_s, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ —Ç–∏—à–∏–Ω–µ.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Å—Ç–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é output_dir, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É—è –≥—Ä–æ–º–∫–æ—Å—Ç—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    if not os.path.exists(input_file):
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - {input_file}")
        return None

    # Validate speed factor
    if not (0.5 <= speed_factor <= 10.0): # Allow up to 10x, but atempo works best 0.5-2.0, chaining needed > 2.0
         print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ {speed_factor} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (0.5-2.0) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ atempo. –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∏–¥–µ–∞–ª—å–Ω—ã–º –∏–ª–∏ ffmpeg –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.")
         # For speeds > 2.0, ffmpeg needs chained atempo filters. Pydub might not handle this directly via parameters.
         # Example for 3x speed: -filter:a atempo=2.0,atempo=1.5
         # We'll try passing it directly, ffmpeg might handle simple cases > 2.0 or fail.
         if speed_factor <= 0:
             print(f"–û—à–∏–±–∫–∞: –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
             return None


    print(f"üéµ --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {input_file} (–°–∫–æ—Ä–æ—Å—Ç—å: {speed_factor}x) ---")
    print(f"  –ó–∞–≥—Ä—É–∑–∫–∞...")
    try:
        audio = AudioSegment.from_mp3(input_file)
    except CouldntDecodeError: # More specific error catch
         print(f"  –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {input_file}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è MP3.")
         return None
    except FileNotFoundError: # Handle case where file disappears between check and load
        print(f"  –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏: {input_file}")
        return None
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MP3 —Ñ–∞–π–ª–∞ ({input_file}): {e}")
        print("  –£–±–µ–¥–∏—Å—å, —á—Ç–æ ffmpeg –∏–ª–∏ libav —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ PATH.")
        return None

    print(f"  –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(audio)/1000:.2f}s).")
    total_duration_ms = len(audio)
    target_chunk_duration_ms = target_chunk_duration_s * 1000
    search_window_ms = search_window_s * 1000
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    import time
    start_time = time.time()
    original_rms = audio.dBFS
    original_peak = audio.max_dBFS
    
    stats = {
        'original_duration_ms': total_duration_ms,
        'target_duration_ms': total_duration_ms / speed_factor,  # –ü–æ—Å–ª–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è
        'original_rms': original_rms,
        'original_peak': original_peak,
        'chunks_count': 0,
        'total_output_size_bytes': 0,
        'rms_values': [],
        'peak_values': [],
        'speed_factor': speed_factor,
        'enable_normalization': enable_normalization,
        'processing_time_sec': 0
    }

    if not os.path.exists(output_dir):
        # print(f"  –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∫—É—Å–∫–æ–≤: {output_dir}")
        try:
             os.makedirs(output_dir)
        except OSError as e:
             print(f"  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {output_dir}: {e}")
             return None


    base_filename = os.path.splitext(os.path.basename(input_file))[0]
    current_pos_ms = 0
    chunk_index = 1
    # Safety counter to prevent infinite loops in edge cases
    # Estimate iterations based on original duration, speed doesn't affect number of split points
    max_iterations = (total_duration_ms // (target_chunk_duration_ms / 2)) + 20 # Increased buffer
    iterations = 0


    while current_pos_ms < total_duration_ms and iterations < max_iterations:
        iterations += 1
        ideal_split_point_ms = current_pos_ms + target_chunk_duration_ms

        if ideal_split_point_ms >= total_duration_ms - (search_window_ms / 2):
            split_point_ms = total_duration_ms
            # print(f"  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ {chunk_index}.")
        else:
            found_split_point = find_silent_split_point(
                audio,
                ideal_split_point_ms,
                search_window_ms,
                silence_thresh_db,
                min_silence_len_ms
            )

            if found_split_point:
                if found_split_point > current_pos_ms:
                    split_point_ms = found_split_point
                    # print(f"  –ù–∞–π–¥–µ–Ω–∞ —Ç–∏—à–∏–Ω–∞ –¥–ª—è –∫—É—Å–∫–∞ {chunk_index} –æ–∫–æ–ª–æ {ideal_split_point_ms/1000:.2f}s, —Ä–µ–∑–∫–∞ –≤ {split_point_ms/1000:.2f}s")
                else:
                    split_point_ms = ideal_split_point_ms
                    # print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–∞–π–¥–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ —Ç–∏—à–∏–Ω—ã ({found_split_point/1000:.2f}s) <= —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ ({current_pos_ms/1000:.2f}s). –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É {split_point_ms/1000:.2f}s.")

            else:
                split_point_ms = ideal_split_point_ms
                # print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¢–∏—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫—É—Å–∫–∞ {chunk_index} –æ–∫–æ–ª–æ {ideal_split_point_ms/1000:.2f}s. –†–µ–∂–µ–º —Ç–æ—á–Ω–æ.")

            min_last_chunk_len = min_silence_len_ms # Allow last chunk to be at least min silence long
            if total_duration_ms - split_point_ms < min_last_chunk_len and split_point_ms != total_duration_ms :
                 # print(f"  –¢–æ—á–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {split_point_ms/1000:.2f}s —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É ({total_duration_ms/1000:.2f}s). –ë–µ—Ä–µ–º –≤—Å–µ –¥–æ –∫–æ–Ω—Ü–∞.")
                 split_point_ms = total_duration_ms


        if split_point_ms <= current_pos_ms and split_point_ms != total_duration_ms:
             print(f"  –û—à–∏–±–∫–∞: –¢–æ—á–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è {split_point_ms}ms –Ω–µ –ø—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é {current_pos_ms}ms. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 1–º—Å –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∞.")
             split_point_ms = current_pos_ms + 1
             if split_point_ms >= total_duration_ms:
                 split_point_ms = total_duration_ms


        if current_pos_ms >= split_point_ms:
             if current_pos_ms == total_duration_ms:
                 # print(f"  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫—É—Å–∫–∞ {chunk_index}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
                 break
             else:
                 print(f"  –û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∫—É—Å–æ–∫ —Å –Ω–∞—á–∞–ª–æ–º {current_pos_ms}ms >= –∫–æ–Ω—Ü–æ–º {split_point_ms}ms. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é.")
                 current_pos_ms = split_point_ms + 1 # Advance past the problematic point
                 if current_pos_ms >= total_duration_ms:
                     break
                 continue


        # print(f"  –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—É—Å–∫–∞ {chunk_index}: [{current_pos_ms/1000:.2f}s - {split_point_ms/1000:.2f}s] (–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {(split_point_ms - current_pos_ms)/1000:.2f}s)")
        try:
            chunk = audio[current_pos_ms:split_point_ms]
        except IndexError:
             print(f"  –û—à–∏–±–∫–∞ (IndexError) –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫—É—Å–∫–∞ {chunk_index} ({current_pos_ms}:{split_point_ms}). –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–ø—É—Å–∫.")
             current_pos_ms = split_point_ms + 1
             if current_pos_ms >= total_duration_ms: break
             continue
        except Exception as e:
             print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫—É—Å–∫–∞ {chunk_index} ({current_pos_ms}:{split_point_ms}): {e}")
             current_pos_ms = split_point_ms + 1
             if current_pos_ms >= total_duration_ms: break
             continue


        output_filename = os.path.join(output_dir, f"{base_filename}_{chunk_index:03d}.mp3")

        if len(chunk) > 0:
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
            current_chunk_to_export = chunk # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —á–∞–Ω–∫
            if enable_normalization:
                initial_dbfs = chunk.dBFS
                print(f"  –ö—É—Å–æ–∫ {chunk_index}: –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {initial_dbfs:.2f} dBFS.") # –≠—Ç–æ RMS
                
                normalized_chunk = normalize_audio(chunk, target_dbfs=target_normalization_dbfs)
                # final_dbfs = normalized_chunk.dBFS # –≠—Ç–æ RMS –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                # –û–±–Ω–æ–≤–∏–º –ª–æ–≥, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–µ–µ, —á—Ç–æ —ç—Ç–æ –ø–∏–∫–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                print(f"  –ö—É—Å–æ–∫ {chunk_index}: –ü–∏–∫–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ {target_normalization_dbfs} dBFS –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. RMS –ø–æ—Å–ª–µ: {normalized_chunk.dBFS:.2f} dBFS, –ü–∏–∫ –ø–æ—Å–ª–µ: {normalized_chunk.max_dBFS:.2f} dBFS.")
                current_chunk_to_export = normalized_chunk # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫
            else:
                print(f"  –ö—É—Å–æ–∫ {chunk_index}: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞. RMS: {chunk.dBFS:.2f} dBFS, –ü–∏–∫: {chunk.max_dBFS:.2f} dBFS.")

            export_params = {}
            if speed_factor != 1.0:
                # Basic atempo filter. For speed > 2.0, might need 'atempo=2.0,atempo=...'
                # We pass it directly, ffmpeg might handle simple cases or fail gracefully.
                export_params["parameters"] = ["-filter:a", f"atempo={speed_factor}"]
                # Estimate new duration for logging
                estimated_new_duration = len(chunk) / speed_factor
                print(f"  –≠–∫—Å–ø–æ—Ä—Ç –∫—É—Å–∫–∞ {chunk_index}: {output_filename} (–û—Ä–∏–≥. –¥–ª–∏–Ω–∞: {len(chunk)/1000:.2f}s, –û–∂–∏–¥. –Ω–æ–≤–∞—è: {estimated_new_duration/1000:.2f}s)")
            else:
                print(f"  –≠–∫—Å–ø–æ—Ä—Ç –∫—É—Å–∫–∞ {chunk_index}: {output_filename} (–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {len(chunk)/1000:.2f}s)")

            try:
                # Use parameters for ffmpeg filters/options
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π —á–∞–Ω–∫ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
                current_chunk_to_export.export(output_filename, format="mp3", parameters=export_params.get("parameters"))
                
                # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats['chunks_count'] += 1
                try:
                    file_size = os.path.getsize(output_filename)
                    stats['total_output_size_bytes'] += file_size
                except:
                    pass
                
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫—É—Å–∫–∞
                final_rms = current_chunk_to_export.dBFS
                final_peak = current_chunk_to_export.max_dBFS
                stats['rms_values'].append(final_rms)
                stats['peak_values'].append(final_peak)
                
            except Exception as e:
                print(f"  –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—É—Å–∫–∞ {chunk_index} ({output_filename}): {e}")
        else:
             # print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ö—É—Å–æ–∫ {chunk_index} –ø—É—Å—Ç (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 0ms). –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω.")
             pass


        current_pos_ms = split_point_ms
        chunk_index += 1


    if iterations >= max_iterations:
        print(f"  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π ({max_iterations}) –¥–ª—è —Ñ–∞–π–ª–∞ {input_file}. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats['processing_time_sec'] = time.time() - start_time
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    if stats['rms_values']:
        stats['avg_final_rms'] = sum(stats['rms_values']) / len(stats['rms_values'])
        stats['avg_final_peak'] = sum(stats['peak_values']) / len(stats['peak_values'])
    else:
        stats['avg_final_rms'] = 0
        stats['avg_final_peak'] = 0

    print(f"--- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {input_file} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
    print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
    
    return stats


def calculate_sha256(filepath):
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA256 —Ö–µ—à —Ñ–∞–π–ª–∞."""
    sha256_hash = hashlib.sha256()
    try:
        with open(filepath, "rb") as f:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫—É—Å–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç—å —Ü–µ–ª–∏–∫–æ–º
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except FileNotFoundError:
        print(f"  –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö–µ—à–∞: {filepath}")
        return None
    except Exception as e:
        print(f"  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö–µ—à–∞ ({filepath}): {e}")
        return None


def copy_with_verify(source_root, dest_root):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ source_root –≤ dest_root —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ö–µ—à–∞."""
    abs_source_root = os.path.abspath(source_root)
    abs_dest_root = os.path.abspath(dest_root)

    print(f"\n–ó–∞–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ '{abs_source_root}' –≤ '{abs_dest_root}' —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")

    if not os.path.isdir(abs_source_root):
        print(f"–û—à–∏–±–∫–∞: –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {abs_source_root}")
        return False # Indicate failure
    elif not os.path.isdir(abs_dest_root):
        print(f"–û—à–∏–±–∫–∞: –ü—É—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {abs_dest_root}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∏—Å–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ (–Ω–∞–ø—Ä., /Volumes/SWIM PRO)")
        return False # Indicate failure

    files_to_copy = []
    for root, dirs, files in os.walk(abs_source_root):
        files.sort()
        dirs.sort()
        for filename in files:
            source_path = os.path.join(root, filename)
            relative_path = os.path.relpath(source_path, abs_source_root)
            files_to_copy.append(relative_path)

    files_to_copy.sort()

    if not files_to_copy:
        print("–í –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return True # Nothing to copy is not an error in itself

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(files_to_copy)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
    copied_count = 0
    verified_count = 0
    copy_errors = 0
    verification_errors = 0

    for i, relative_path in enumerate(files_to_copy):
        source_file = os.path.join(abs_source_root, relative_path)
        dest_file = os.path.join(abs_dest_root, relative_path)
        dest_dir = os.path.dirname(dest_file)

        print(f"[{i+1}/{len(files_to_copy)}] –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {relative_path}", end='')

        try:
            os.makedirs(dest_dir, exist_ok=True)
            shutil.copy2(source_file, dest_file)
            copied_count += 1
            print(f" -> –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω...", end='')

            print(" –ü—Ä–æ–≤–µ—Ä–∫–∞...", end='')
            source_hash = calculate_sha256(source_file)
            dest_hash = calculate_sha256(dest_file)

            if source_hash and dest_hash and source_hash == dest_hash:
                print(" OK")
                verified_count += 1
            else:
                print(" –û–®–ò–ë–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò!")
                if not source_hash:
                    print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {source_file}")
                if not dest_hash:
                    print(f"    –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {dest_file}")
                if source_hash and dest_hash:
                    print(f"    –ò—Å—Ç–æ—á–Ω–∏–∫ —Ö–µ—à: {source_hash}")
                    print(f"    –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ö–µ—à: {dest_hash}")
                verification_errors += 1

        except Exception as e:
            print(f" –û–®–ò–ë–ö–ê –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø! {e}")
            copy_errors += 1

    print("\n--------------------------------------")
    print("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {len(files_to_copy)}")
    print(f"–£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {copied_count}")
    print(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {verified_count}")
    success = True
    if copy_errors > 0:
        print(f"–û—à–∏–±–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {copy_errors}")
        success = False
    if verification_errors > 0:
        print(f"–û—à–∏–±–æ–∫ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verification_errors}")
        success = False
    print("--------------------------------------")
    return success


def move_files_structure(source_root, move_dest_root):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ source_root –≤ move_dest_root, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫."""
    abs_source_root = os.path.abspath(source_root)
    abs_move_dest_root = os.path.abspath(move_dest_root)

    print(f"\n–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏–∑ '{abs_source_root}' –≤ '{abs_move_dest_root}'...")

    if not os.path.isdir(abs_source_root):
        print(f"–û—à–∏–±–∫–∞: –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {abs_source_root}")
        return False

    # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    try:
        os.makedirs(abs_move_dest_root, exist_ok=True)
    except OSError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è {abs_move_dest_root}: {e}")
        return False

    files_to_move = []
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    for root, dirs, files in os.walk(abs_source_root):
        for filename in files:
            source_path = os.path.join(root, filename)
            relative_path = os.path.relpath(source_path, abs_source_root)
            files_to_move.append(relative_path)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏ (—Ö–æ—Ç—è –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è move –º–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–µ–Ω)
    files_to_move.sort()

    if not files_to_move:
        print("–í –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
        return True

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(files_to_move)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
    moved_count = 0
    move_errors = 0

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã
    for i, relative_path in enumerate(files_to_move):
        source_file = os.path.join(abs_source_root, relative_path)
        dest_file = os.path.join(abs_move_dest_root, relative_path)
        dest_dir = os.path.dirname(dest_file)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫ –Ω–∞ –ø—Ä–µ–¥. —à–∞–≥–∞—Ö)
        if not os.path.exists(source_file):
            print(f"[{i+1}/{len(files_to_move)}] –ü—Ä–æ–ø—É—Å–∫: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {relative_path}")
            continue

        print(f"[{i+1}/{len(files_to_move)}] –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: {relative_path}", end='')
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            os.makedirs(dest_dir, exist_ok=True)
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            shutil.move(source_file, dest_file)
            moved_count += 1
            print(" -> OK")
        except Exception as e:
            print(f" –û–®–ò–ë–ö–ê –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø! {e}")
            move_errors += 1

    # –ü–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, —É–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {abs_source_root}...")
    deleted_folders_count = 0
    try:
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–µ—Ä–µ–≤—É –ø–∞–ø–æ–∫ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (topdown=False)
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ –ø–∞–ø–∫–∏, –∞ –ø–æ—Ç–æ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ
        for root, dirs, files in os.walk(abs_source_root, topdown=False):
            if not dirs and not files: # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –Ω–µ—Ç –Ω–∏ –ø–æ–¥–ø–∞–ø–æ–∫, –Ω–∏ —Ñ–∞–π–ª–æ–≤
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∞–º–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–º–µ—â–∞–ª–∏,
                # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∏ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.
                # –•–æ—Ç—è os.rmdir(abs_source_root) —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞.
                try:
                    os.rmdir(root)
                    print(f"  –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: {root}")
                    deleted_folders_count +=1
                except OSError as e:
                    # –í–æ–∑–º–æ–∂–Ω–∞ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ .DS_Store –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤)
                    # –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–µ–Ω—å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (—Ö–æ—Ç—è —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –∑–¥–µ—Å—å)
                    print(f"  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É {root}: {e}")
        if deleted_folders_count > 0:
            print(f"–£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫: {deleted_folders_count}")
        else:
            print("–ü—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e: # –ë–æ–ª–µ–µ –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å os.walk
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—É—Å—Ç—ã—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–∞–ø–æ–∫: {e}")


    print("\n--------------------------------------")
    print("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    print(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {len(files_to_move)}")
    print(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {moved_count}")
    success = True
    if move_errors > 0:
        print(f"–û—à–∏–±–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {move_errors}")
        success = False
    print("--------------------------------------")
    return success


def get_total_and_cumulative_durations(mp3_files):
    total = 0
    cumulative = [0]
    total_files = len(mp3_files)
    
    if total_files == 0:
        return total, cumulative[:-1]
    
    print(f"–ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π {total_files} MP3 —Ñ–∞–π–ª–æ–≤...")
    
    for i, f in enumerate(mp3_files):
        print(f"  [{i+1}/{total_files}] –ê–Ω–∞–ª–∏–∑: {os.path.basename(f)}")
        try:
            dur = len(AudioSegment.from_mp3(f))
            total += dur
            cumulative.append(total)
        except Exception as e:
            print(f"    –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {f}: {e}")
            cumulative.append(total)  # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π total –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    hours, minutes = format_time(total)
    print(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º")
    
    return total, cumulative[:-1]  # cumulative[i] ‚Äî —Å—É–º–º–∞ –¥–æ i-–≥–æ —Ñ–∞–π–ª–∞

def tts_to_wav(text, lang='ru'):
    with NamedTemporaryFile(delete=False, suffix='.wav') as f:
        if platform.system() == 'Darwin':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π say —Å –≥–æ–ª–æ—Å–æ–º Yuri (Enhanced)
            voice = 'Yuri (Enhanced)'
            subprocess.run(['say', '-v', voice, '-o', f.name, '--data-format=LEI16@44100', text])
        else:
            # pyttsx3 –¥–ª—è Windows/Linux
            engine = pyttsx3.init()
            engine.setProperty('rate', 180)
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç
            voices = engine.getProperty('voices')
            ru_voices = [v.id for v in voices if 'ru' in v.id or 'russian' in v.name.lower()]
            if ru_voices:
                engine.setProperty('voice', ru_voices[0])
            engine.save_to_file(text, f.name)
            engine.runAndWait()
        return f.name

def format_time(ms):
    s = ms // 1000
    h = s // 3600
    m = (s % 3600) // 60
    return h, m

def format_size(bytes_size):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
        if bytes_size < 1024.0:
            return f"{bytes_size:.1f} {unit}"
        bytes_size /= 1024.0
    return f"{bytes_size:.1f} –¢–ë"

def print_processing_statistics(all_stats, total_original_duration, total_target_duration, 
                                total_chunks, total_output_size, total_processing_time, 
                                processed_files, speed_factor, normalization_enabled):
    """–í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    print("\n" + "="*70)
    print("üìä –ü–û–î–†–û–ë–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    print("="*70)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    orig_h, orig_m = format_time(total_original_duration)
    target_h, target_m = format_time(total_target_duration)
    
    print(f"üïí –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print(f"   –ò—Å—Ö–æ–¥–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:  {orig_h}—á {orig_m}–º ({total_original_duration/1000:.1f}—Å)")
    print(f"   –ò—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:   {target_h}—á {target_m}–º ({total_target_duration/1000:.1f}—Å)")
    if speed_factor != 1.0:
        time_saved = total_original_duration - total_target_duration
        time_saved_h, time_saved_m = format_time(time_saved)
        print(f"   –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏:        {time_saved_h}—á {time_saved_m}–º ({speed_factor:.2f}x —É—Å–∫–æ—Ä–µ–Ω–∏–µ)")
    
    # –§–∞–π–ª–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    print(f"\nüìÅ –§–∞–π–ª–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:       {processed_files}")
    print(f"   –°–æ–∑–¥–∞–Ω–æ –∫—É—Å–∫–æ–≤:          {total_chunks}")
    print(f"   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {format_size(total_output_size)}")
    if processed_files > 0:
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –∫—É—Å–∫–æ–≤ –Ω–∞ —Ñ–∞–π–ª:  {total_chunks / processed_files:.1f}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∫—É—Å–∫–∞:    {format_size(total_output_size / total_chunks) if total_chunks > 0 else '0 –ë'}")
    
    # –ê—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    if all_stats:
        original_rms_values = []
        original_peak_values = []
        final_rms_values = []
        final_peak_values = []
        
        for stat in all_stats:
            if stat['original_rms'] and stat['original_rms'] != float('-inf'):
                original_rms_values.append(stat['original_rms'])
            if stat['original_peak'] and stat['original_peak'] != float('-inf'):
                original_peak_values.append(stat['original_peak'])
            if stat['rms_values']:
                final_rms_values.extend([rms for rms in stat['rms_values'] if rms != float('-inf')])
            if stat['peak_values']:
                final_peak_values.extend([peak for peak in stat['peak_values'] if peak != float('-inf')])
        
        print(f"\nüîä –ê—É–¥–∏–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        if original_rms_values:
            avg_orig_rms = sum(original_rms_values) / len(original_rms_values)
            print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π RMS:    {avg_orig_rms:.1f} dBFS")
        if original_peak_values:
            avg_orig_peak = sum(original_peak_values) / len(original_peak_values)
            print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø–∏–∫:    {avg_orig_peak:.1f} dBFS")
        
        if final_rms_values:
            avg_final_rms = sum(final_rms_values) / len(final_rms_values)
            print(f"   –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ä–µ–¥–Ω–∏–π RMS:    {avg_final_rms:.1f} dBFS")
        if final_peak_values:
            avg_final_peak = sum(final_peak_values) / len(final_peak_values)
            print(f"   –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø–∏–∫:    {avg_final_peak:.1f} dBFS")
        
        if normalization_enabled and original_rms_values and final_rms_values:
            rms_change = avg_final_rms - avg_orig_rms
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ RMS:           {rms_change:+.1f} dBFS")
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print(f"\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
    print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:         {total_processing_time:.1f} —Å–µ–∫")
    if processed_files > 0:
        print(f"   –í—Ä–µ–º—è –Ω–∞ —Ñ–∞–π–ª:           {total_processing_time / processed_files:.1f} —Å–µ–∫/—Ñ–∞–π–ª")
    if total_original_duration > 0:
        speed_ratio = (total_original_duration / 1000) / total_processing_time
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏:      {speed_ratio:.1f}x –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
    
    print("="*70)

def plural_ru(n, form1, form2, form5):
    """–°–∫–ª–æ–Ω—è–µ—Ç —Ä—É—Å—Å–∫–æ–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ —á–∏—Å–ª—É: 1, 2-4, 5+ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ü–µ–Ω—Ç/–ø—Ä–æ—Ü–µ–Ω—Ç–∞/–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)."""
    n = abs(n) % 100
    n1 = n % 10
    if 10 < n < 20:
        return form5
    if n1 == 1:
        return form1
    if 2 <= n1 <= 4:
        return form2
    return form5

if __name__ == "__main__":
    import sys
    if '--test-plural' in sys.argv:
        print('–¢–µ—Å—Ç—ã –¥–ª—è plural_ru:')
        test_cases = [
            (1, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç'),
            (2, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞'),
            (5, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'),
            (11, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'),
            (21, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç'),
            (22, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞'),
            (25, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'),
            (101, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç'),
            (0, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'),
            (-1, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç'),
            (112, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤'),
            (4, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—ã'),
            (14, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç'),
            (23, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', '—á–∞—Å–∞'),
            (1004, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', '—á–∞—Å–∞'),
        ]
        errors = 0
        for n, f1, f2, f5, expected in test_cases:
            result = plural_ru(n, f1, f2, f5)
            ok = '‚úÖ' if result == expected else '‚ùå'
            if result != expected:
                errors += 1
            print(f'{ok} {n} ‚Üí {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})')
        if errors == 0:
            print('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        else:
            print(f'–û—à–∏–±–æ–∫: {errors}')
        sys.exit(0)

    parser = argparse.ArgumentParser(
        description="–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç MP3, —Ä–∞–∑–¥–µ–ª—è–µ—Ç, –∏–∑–º–µ–Ω—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å, –∫–æ–ø–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        formatter_class=argparse.RawTextHelpFormatter
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç—ã
    mode_group = parser.add_argument_group('–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã')
    mode_group.add_argument("--copy-only", action='store_true', help="–¢–æ–ª—å–∫–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ --output-dir –≤ --copy-to, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤ copied_mp3.")

    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
    path_group = parser.add_argument_group('–ü—É—Ç–∏')
    path_group.add_argument("-i", "--input-dir", default="source_mp3", help="–ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ MP3 (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: source_mp3.")
    path_group.add_argument("-o", "--output-dir", default="ready_mp3", help="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—á—Ç–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: ready_mp3.")
    path_group.add_argument("--copy-to", help="–ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä., /Volumes/DRIVE). –û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è --copy-only.")

    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_group = parser.add_argument_group('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ --copy-only)')
    processing_group.add_argument("-d", "--duration", type=int, default=100, help="–ñ–µ–ª–∞–µ–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Å–∫–∞ –≤ —Å–µ–∫. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100.")
    processing_group.add_argument("-w", "--window", type=int, default=10, help="–û–∫–Ω–æ –ø–æ–∏—Å–∫–∞ —Ç–∏—à–∏–Ω—ã –≤ —Å–µ–∫. (+/- window/2). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10.")
    processing_group.add_argument("-t", "--threshold", type=int, default=-40, help="–ü–æ—Ä–æ–≥ —Ç–∏—à–∏–Ω—ã –≤ dBFS. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: -40.")
    processing_group.add_argument("-m", "--min-silence", type=int, default=500, help="–ú–∏–Ω. –¥–ª–∏–Ω–∞ —Ç–∏—à–∏–Ω—ã –≤ –º—Å. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 500.")
    processing_group.add_argument("-s", "--speed", type=float, default=1.0, help="–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ (0.5-2.0). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.0.")
    processing_group.add_argument("--skip-existing", action='store_true', help="–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ 1-–π –∫—É—Å–æ–∫ —É–∂–µ –µ—Å—Ç—å.")
    processing_group.add_argument("--tts-progress", action='store_true', help="–í—Å—Ç–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≤ –ø–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞")
    processing_group.add_argument("--tts-progress-grid", action='store_true', help="–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –Ω–µ —á–∞—â–µ —á–µ–º –∫–∞–∂–¥—ã–µ 5%%")
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    processing_group.add_argument("--norm-dbfs", type=float, default=-0.1, help="–¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ dBFS (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: -0.1.")
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    processing_group.add_argument("--enable-normalization", action='store_true', help="–í–∫–ª—é—á–∏—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–æ–º–∫–æ—Å—Ç–∏.")

    args = parser.parse_args()

    # –ü–∞–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    MOVE_TARGET_DIR = "copied_mp3"

    if args.copy_only:
        print("--- –†–ï–ñ–ò–ú: –¢–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ---")
        if not args.copy_to:
            parser.error("--copy-to —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ --copy-only.")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        copy_success = copy_with_verify(args.output_dir, args.copy_to)
        
        # –ï—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º
        if copy_success:
            move_success = move_files_structure(args.output_dir, MOVE_TARGET_DIR)
            sys.exit(0 if move_success else 1)
        else:
            print("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            sys.exit(1)

    else:
        print("--- –†–ï–ñ–ò–ú: –û–±—Ä–∞–±–æ—Ç–∫–∞, –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ --copy-to) ---")
        input_root_dir = args.input_dir
        output_root_dir = args.output_dir

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ ffmpeg --- 
        try:
            print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ffmpeg...")
            ff_test_cmd = "ffmpeg -version > /dev/null 2>&1" if os.name != 'nt' else "ffmpeg -version > NUL 2>&1"
            exit_code = os.system(ff_test_cmd)
            if exit_code != 0:
                print("\n!!! –û–®–ò–ë–ö–ê: ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH.")
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg: https://ffmpeg.org/download.html")
                print("macOS (Homebrew): brew install ffmpeg")
                print("Debian/Ubuntu: sudo apt update && sudo apt install ffmpeg")
                print("Windows: –°–∫–∞—á–∞–π—Ç–µ —Å —Å–∞–π—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ PATH.")
                sys.exit(1)
            print("ffmpeg –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
             print(f"\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ffmpeg: {e}")
             sys.exit(1)

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π --- 
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫: {os.path.abspath(input_root_dir)}")
        print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {os.path.abspath(output_root_dir)}")
        if not os.path.isdir(input_root_dir):
             print(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {input_root_dir}")
             os.makedirs(input_root_dir)
        if not os.path.isdir(output_root_dir):
             print(f"–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {output_root_dir}")
             os.makedirs(output_root_dir)

        print("\n–ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        found_files = 0
        processed_files = 0
        error_files = 0

        # --- –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MP3 —Ñ–∞–π–ª–æ–≤ ---
        print("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MP3 —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
        import glob
        all_mp3 = []
        for root, dirs, files in os.walk(input_root_dir):
            files.sort()
            for f in files:
                if f.lower().endswith('.mp3'):
                    all_mp3.append(os.path.join(root, f))
        all_mp3.sort()  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(all_mp3)} MP3 —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # --- –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è TTS progress (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω) ---
        if args.tts_progress:
            total_dur, cumulative_durs = get_total_and_cumulative_durations(all_mp3)
        else:
            total_dur, cumulative_durs = 0, [0] * len(all_mp3)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å TTS —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–¥–ª—è —Ä–µ–∂–∏–º–∞ grid)
        last_tts_progress_grid = -1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        import time
        total_start_time = time.time()
        all_stats = []
        total_original_duration = 0
        total_target_duration = 0
        total_chunks = 0
        total_output_size = 0

        # --- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
        print(f"\n–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤...") 
        for idx, (root, dirs, files) in enumerate(os.walk(input_root_dir)):
            files.sort()
            mp3_files = [f for f in files if f.lower().endswith('.mp3')]
            if not mp3_files:
                continue
            relative_path = os.path.relpath(root, input_root_dir)
            current_output_dir = os.path.join(output_root_dir, relative_path)
            if not os.path.isdir(current_output_dir):
                try:
                    os.makedirs(current_output_dir)
                except OSError as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {current_output_dir}: {e}. –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ.")
                    error_files += len(mp3_files)
                    continue
            for file_idx, filename in enumerate(mp3_files):
                found_files += 1
                input_file_path = os.path.join(root, filename)
                base_output_name = os.path.splitext(filename)[0]
                potential_first_chunk = os.path.join(current_output_dir, f"{base_output_name}_001.mp3")
                if args.skip_existing and os.path.exists(potential_first_chunk):
                    print(f"--- –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ (–Ω–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Å–æ–∫): {input_file_path} ---")
                    continue
                if args.tts_progress:
                    # --- –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º TTS ---
                    try:
                        file_idx_in_all = all_mp3.index(input_file_path)
                    except ValueError:
                        file_idx_in_all = 0
                    percent = int(round(100 * cumulative_durs[file_idx_in_all] / total_dur)) if total_dur > 0 else 0
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—Å—Ç–∞–≤–ª—è—Ç—å TTS —Å–æ–æ–±—â–µ–Ω–∏–µ
                    should_insert_tts = True
                    if args.tts_progress_grid:
                        # –†–µ–∂–∏–º grid: –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å >= 5% –∏ –Ω–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º 5% –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                        if percent < 5:
                            should_insert_tts = False
                        else:
                            current_grid_position = (percent // 5) * 5  # 5, 10, 15, 20, ...
                            if current_grid_position <= last_tts_progress_grid:
                                should_insert_tts = False
                            else:
                                last_tts_progress_grid = current_grid_position
                    
                    if should_insert_tts:
                        h, m = format_time(total_dur)
                        percent_word = plural_ru(percent, '–ø—Ä–æ—Ü–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–Ω—Ç–∞', '–ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤')
                        hour_word = plural_ru(h, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')
                        minute_word = plural_ru(m, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')
                        tts_text = f"–≤—ã –ø—Ä–æ—Å–ª—É—à–∞–ª–∏ {percent} {percent_word} –∫–Ω–∏–≥–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {h} {hour_word} {m} {minute_word}"
                        print(f"  üì¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS —Å–æ–æ–±—â–µ–Ω–∏—è: \"{tts_text}\"")
                        tts_wav = tts_to_wav(tts_text)
                        print(f"  ‚úÖ TTS —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä–≤—ã–π –∫—É—Å–æ–∫")
                    else:
                        tts_wav = None
                        if args.tts_progress_grid:
                            print(f"  ‚è≠Ô∏è  TTS —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è {percent}% (—Ä–µ–∂–∏–º grid: –Ω–µ —á–∞—â–µ –∫–∞–∂–¥—ã—Ö 5%)")
                        else:
                            print(f"  ‚è≠Ô∏è  TTS —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–ª—è {percent}%")
                    # --- –Ω–∞—Ä–µ–∑–∫–∞ ---
                    def split_mp3_with_tts(input_file, output_dir, *args_, **kwargs_):
                        from pydub import AudioSegment
                        chunks = []
                        audio = AudioSegment.from_mp3(input_file)
                        file_stats = split_mp3(input_file, output_dir, *args_, **kwargs_)
                        first_chunk = os.path.join(output_dir, f"{base_output_name}_001.mp3")
                        if os.path.exists(first_chunk) and tts_wav:
                            print(f"  üîä –î–æ–±–∞–≤–ª–µ–Ω–∏–µ TTS —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ –∫—É—Å–∫–∞: {os.path.basename(first_chunk)}")
                            seg1 = AudioSegment.from_wav(tts_wav)
                            seg2 = AudioSegment.from_mp3(first_chunk)
                            combined = seg1 + seg2
                            combined.export(first_chunk, format="mp3")
                            os.remove(tts_wav)
                            print(f"  üéØ TTS —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ñ–∞–π–ª")
                        return file_stats
                    try:
                        file_stats = split_mp3_with_tts(
                            input_file_path,
                            current_output_dir,
                            target_chunk_duration_s=args.duration,
                            search_window_s=args.window,
                            silence_thresh_db=args.threshold,
                            min_silence_len_ms=args.min_silence,
                            speed_factor=args.speed,
                            target_normalization_dbfs=args.norm_dbfs,
                            enable_normalization=args.enable_normalization
                        )
                        if file_stats:
                            all_stats.append(file_stats)
                            total_original_duration += file_stats['original_duration_ms']
                            total_target_duration += file_stats['target_duration_ms']
                            total_chunks += file_stats['chunks_count']
                            total_output_size += file_stats['total_output_size_bytes']
                        processed_files += 1
                    except Exception as e:
                        print(f"\n!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {input_file_path}: {e}")
                        print("    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞–π–ª–æ–º...\n")
                        error_files += 1
                else:
                    try:
                        file_stats = split_mp3(
                            input_file_path,
                            current_output_dir,
                            target_chunk_duration_s=args.duration,
                            search_window_s=args.window,
                            silence_thresh_db=args.threshold,
                            min_silence_len_ms=args.min_silence,
                            speed_factor=args.speed,
                            target_normalization_dbfs=args.norm_dbfs,
                            enable_normalization=args.enable_normalization
                        )
                        if file_stats:
                            all_stats.append(file_stats)
                            total_original_duration += file_stats['original_duration_ms']
                            total_target_duration += file_stats['target_duration_ms']
                            total_chunks += file_stats['chunks_count']
                            total_output_size += file_stats['total_output_size_bytes']
                        processed_files += 1
                    except Exception as e:
                        print(f"\n!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {input_file_path}: {e}")
                        print("    –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞–π–ª–æ–º...\n")
                        error_files += 1

        # --- –í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ --- 
        total_processing_time = time.time() - total_start_time
        
        print("\n======================================")
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        print(f"–ù–∞–π–¥–µ–Ω–æ MP3 —Ñ–∞–π–ª–æ–≤: {found_files}")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_files}")
        if error_files > 0:
            print(f"–§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏/–ø—Ä–æ–ø—É—â–µ–Ω–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error_files}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {os.path.abspath(output_root_dir)}")
        print("======================================")
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if processed_files > 0 and all_stats:
            print_processing_statistics(
                all_stats, 
                total_original_duration, 
                total_target_duration,
                total_chunks, 
                total_output_size, 
                total_processing_time,
                processed_files, 
                args.speed, 
                args.enable_normalization
            )

        # --- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ --- 
        if args.copy_to:
            copy_success = copy_with_verify(output_root_dir, args.copy_to)
            # –ï—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ–º–µ—â–∞–µ–º
            if copy_success:
                move_files_structure(output_root_dir, MOVE_TARGET_DIR)
                # –ó–¥–µ—Å—å –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            else:
                print("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        else:
            print("\n–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –¥–∏—Å–∫ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–æ—Å—å (–æ–ø—Ü–∏—è --copy-to –Ω–µ —É–∫–∞–∑–∞–Ω–∞), –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.") 
            print("\n–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –¥–∏—Å–∫ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–æ—Å—å (–æ–ø—Ü–∏—è --copy-to –Ω–µ —É–∫–∞–∑–∞–Ω–∞), –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.") 